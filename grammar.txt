note: this file may become outdated over the course of the project, oy may be deleted in the future

statements	: NEWLINE* statement (NEWLINE+ statement)*

statement	: KEYWORD:RETURN expr?
			: KEYWORD:CONTINUE
			: KEYWORD:BREAK
			: expre

expr    	: (KEYWORD:SETVAR|KEYWORD:SETIMMUTABLEVAR|KEYWORD:SETTEMPVAR) IDENTIFIER EQUALS expr
			: comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr	: NOT comp-expr
			: arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr	: term ((PLUS|MINUS) term)*

term    	: factor ((MUL|DIV) factor)*

factor  	: (PLUS|MINUS) factor
			: power

power 		: call (POWER factor)*

call	  	: atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom 		: INT|FLOAT|STRING|IDENTIFIER 
			: LPAREN expr RPAREN
			: list-expr 
			: if-expr
			: for-expr
			: while-expr
			: func-def

list-expr 	: LSQUARE (expr (COMMA expr)*) RSQUARE

if-expr		: KEYWORD:IF expr KEYWORD:THEN 
			  (statement elseif-expr|else-expr?)
			  | (NEWLINE statements KEYWORD:END|elseif-expr|else-expr)

elseif-expr	: KEYWORD:ELSEIF expr KEYWORD:THEN 
			  (statement elseif-expr|else-expr?)
			  | (NEWLINE statements KEYWORD:END|elseif-expr|else-expr)

else-expr	: KEYWORD:ELSE 
			  statement 
			  (NEWLINE statements KEYWORD:END)


for-expr	: KEYWORD:FOR IDENTIFIER EQUALS expr KEYWORD:TO expr 
			  (KEYWORD:STEP expr)? KEYWORD:THEN 
			  statement
			  (NEWLINE statements KEYWORD:END)

while-expr	: KEYWORD:WHILE expr KEYWORD:THEN 
			  statement
			  (NEWLINE statements KEYWORD:END)

func-def	: KEYWORD:SETFUNCTION IDENTIFIER?
			  LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
			  (ARROW expr)
			  (NEWLINE statements KEYWORD:END)

